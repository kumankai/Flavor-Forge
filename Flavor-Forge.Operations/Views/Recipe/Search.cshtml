@model List<Flavor_Forge.Entities.Recipe>

<!-- Search Container -->
<div class="container py-4">
    <!-- Search Section with Input Form -->
    <div class="search-section mb-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <h2 class="text-center mb-4">Find Recipes by Ingredients</h2>
                <div class="card shadow-sm">
                    <div class="card-body p-4">
                        <!-- Search Form -->
                        <form asp-controller="Recipe" asp-action="Search" method="post" id="searchForm">
                            <!-- Ingredient Input Section -->
                            <div class="ingredients-input mb-3">
                                <label class="form-label">Enter Your Ingredients (Max 5)</label>
                                <!-- Input Group with Text Input and Add Button -->
                                <div class="input-group mb-2">
                                    <input type="text"
                                           id="ingredientInput"
                                           class="form-control"
                                           placeholder="Type an ingredient and press Enter">
                                    <button type="button" class="btn btn-primary" id="addIngredient">
                                        <i class="fas fa-plus me-1"></i>Add
                                    </button>
                                </div>
                                <!-- Ingredient Counter -->
                                <small class="text-muted mb-2 d-block">
                                    <span id="ingredientCount">0</span>/5 ingredients added
                                </small>
                                <!-- Container for Ingredient Tags -->
                                <div id="ingredientTags" class="d-flex flex-wrap gap-2 mb-3">
                                    <!-- Tags will be dynamically added here -->
                                </div>
                                <!-- Hidden Input for Form Submission -->
                                <input type="hidden" name="ingredients" id="ingredientsList">
                            </div>

                            <!-- Search Button -->
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="fas fa-search me-2"></i>Find Recipes
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    <div class="results-section" id="resultsSection">
        @if (ViewBag.MealNames != null && ((List<string>)ViewBag.MealNames).Count > 0)
        {
            <h3 class="mb-4">Found @(((List<string>)ViewBag.MealNames).Count) Recipes</h3>
            <!-- Recipe Cards Grid -->
            <div class="row g-4">
                @foreach (var mealName in ViewBag.MealNames)
                {
                    <!-- Individual Recipe Card -->
                    <div class="col-md-6 col-lg-4">
                        <div class="card h-100 recipe-card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">@mealName</h5>
                            </div>
                            <!-- Card Footer with View Button -->
                            <div class="card-footer bg-white border-top-0">
                                <a asp-controller="Recipe"
                                   asp-action="Details"
                                   asp-route-mealName="@mealName"
                                   class="btn btn-outline-primary w-100">
                                    View Full Recipe
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (Context.Request.Query.Count > 0)
        {
            <div class="alert alert-info text-center">
                <i class="fas fa-info-circle me-2"></i>No recipes found with these ingredients. Try different ingredients!
            </div>
        }
    </div>
</div>

<!-- Styles Section -->
<style>
    /* Card hover animation */
    .recipe-card {
        transition: transform 0.2s;
        border: none;
    }

        .recipe-card:hover {
            transform: translateY(-5px);
        }

    /* Ingredient tag styling */
    .ingredient-tag {
        background-color: #e9ecef;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

        /* Remove tag button styling */
        .ingredient-tag .remove-tag {
            cursor: pointer;
            color: #dc3545;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            background-color: #fff;
            margin-left: 5px;
        }

            /* Remove tag button hover effect */
            .ingredient-tag .remove-tag:hover {
                background-color: #dc3545;
                color: #fff;
            }

    /* Disabled button styling */
    .btn:disabled {
        cursor: not-allowed;
    }
</style>

<!-- JavaScript Section -->
@section Scripts {
    <script>
        $(document).ready(function () {
            const ingredients = new Set();
            const MAX_INGREDIENTS = 5;

            // Add function to restore previous ingredients
            function restorePreviousIngredients() {
        @if (TempData["LastSearchIngredients"] != null)
        {
            <text>
                            const previousIngredients = '@TempData["LastSearchIngredients"]'.split(',');
                                previousIngredients.forEach(ingredient => {
                                    if (ingredient) {
                                addIngredientTag(ingredient);
                                    }
                                });
            </text>
        }
                    }

            // Call restore function when page loads
            restorePreviousIngredients();

            // Update the ingredient counter and input states
            function updateIngredientCount() {
                const count = ingredients.size;
                $('#ingredientCount').text(count);

                // Disable/enable input and add button based on count
                if (count >= MAX_INGREDIENTS) {
                    $('#ingredientInput').prop('disabled', true);
                    $('#addIngredient').prop('disabled', true);
                    $('#ingredientInput').attr('placeholder', 'Maximum ingredients reached');
                } else {
                    $('#ingredientInput').prop('disabled', false);
                    $('#addIngredient').prop('disabled', false);
                    $('#ingredientInput').attr('placeholder', 'Type an ingredient and press Enter');
                }
            }

            // Add a new ingredient tag
            function addIngredientTag(ingredient) {
                ingredient = ingredient.trim();
                if (ingredient && !ingredients.has(ingredient)) {
                    // Check maximum ingredients limit
                    if (ingredients.size >= MAX_INGREDIENTS) {
                        alert('Maximum 5 ingredients allowed');
                        return;
                    }

                    // Add ingredient to set and create tag element
                    ingredients.add(ingredient);
                    const tag = $(`
                                                <div class="ingredient-tag">
                                                    ${ingredient}
                                                    <button type="button" class="remove-tag border-0">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            `);

                    // Add click handler for remove button
                    tag.find('.remove-tag').click(function () {
                        ingredients.delete(ingredient);
                        tag.remove();
                        updateIngredientsList();
                        updateIngredientCount();
                    });

                    // Add tag to DOM and update states
                    $('#ingredientTags').append(tag);
                    updateIngredientsList();
                    updateIngredientCount();
                }
                $('#ingredientInput').val('');
            }

            // Update hidden input with current ingredients
            function updateIngredientsList() {
                $('#ingredientsList').val(Array.from(ingredients).join(','));
            }

            // Handle Enter key press in input
            $('#ingredientInput').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    const value = $(this).val().trim();
                    if (value) {
                        addIngredientTag(value);
                    }
                }
            });

            // Handle add button click
            $('#addIngredient').click(function () {
                const value = $('#ingredientInput').val().trim();
                if (value) {
                    addIngredientTag(value);
                }
            });

            // Handle form submission
            $('#searchForm').submit(function () {
                if (ingredients.size === 0) {
                    alert('Please add at least one ingredient');
                    return false;
                }

                // Update the hidden input with all ingredients
                $('#ingredientsList').val(Array.from(ingredients).join(','));

                // Show loading state on button
                $(this).find('button[type="submit"]')
                    .prop('disabled', true)
                    .html('<span class="spinner-border spinner-border-sm me-2"></span>Searching...');
            });
        });
    </script>
}
